import requests
from bs4 import BeautifulSoup
import sqlite3
import json
import re
from datetime import datetime

class IPhoneCatalogParser:
    def __init__(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        }
    
    def parse_catalog_html(self, html_content):
        """–ü–∞—Ä—Å–∏–Ω–≥ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞ iPhone"""
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥ HTML...")
        
        if not html_content or len(html_content.strip()) < 100:
            print("‚ùå HTML —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π")
            return {'success': False, 'error': 'Empty HTML'}
        
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # –°–æ—Ö—Ä–∞–Ω–∏–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        with open('debug_catalog.html', 'w', encoding='utf-8') as f:
            f.write(soup.prettify())
        print("üíæ –ö–∞—Ç–∞–ª–æ–≥ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug_catalog.html")
        
        # –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        products = self._extract_products(soup)
        
        result = {
            'products': products,
            'total_products': len(products),
            'parsed_at': datetime.now().isoformat(),
            'success': True
        }
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        return result
    
    def _extract_products(self, soup):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        print("üîç –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤...")
        
        products = []
        
        # –ò—â–µ–º –≤—Å–µ div —Å –∫–ª–∞—Å—Å–æ–º card (–∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤)
        card_elements = soup.find_all('div', class_='card')
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤: {len(card_elements)}")
        
        for i, card in enumerate(card_elements):
            print(f"\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä {i+1}/{len(card_elements)}...")
            
            product_data = self._parse_single_card(card)
            if product_data:
                products.append(product_data)
        
        return products
    
    def _parse_single_card(self, card):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        try:
            # ID —Ç–æ–≤–∞—Ä–∞
            card_id = card.get('id', '')
            product_id = card_id.replace('card_c_', '') if 'card_c_' in card_id else 'unknown'
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            name_elem = card.find('a', class_='card_name')
            model_name = name_elem.get_text().strip() if name_elem else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            # –¶–µ–Ω–∞
            price_elem = card.find('span', class_='card_price')
            price_text = price_elem.get_text().strip() if price_elem else ''
            numeric_price = 0
            
            if price_text:
                clean_price = price_text.replace(' ', '').replace('—Ä—É–±.', '')
                try:
                    numeric_price = int(clean_price)
                except ValueError:
                    numeric_price = 0
            
            # –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            old_price_elem = card.find('strike')
            old_price = old_price_elem.get_text().strip() if old_price_elem else ''
            
            # –¢–µ–∫—É—â–∏–π —Ü–≤–µ—Ç
            color_elem = card.find('small', class_='act_color_name')
            current_color = color_elem.get_text().strip() if color_elem else '–ù–µ —É–∫–∞–∑–∞–Ω'
            
            # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞
            colors = []
            color_elements = card.find_all('button', class_='multi_color')
            for element in color_elements:
                color_name = element.get('data-name-color') or element.get('title', '')
                if color_name and color_name not in colors:
                    colors.append(color_name)
            
            # –ü–∞–º—è—Ç—å
            memory_options = []
            current_memory = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            memory_elements = card.find_all('div', class_='multi_txt')
            
            for element in memory_elements:
                elem_id = element.get('id', '')
                if 'two_' in elem_id:
                    memory_text = element.get_text().strip()
                    if memory_text:
                        memory_options.append(memory_text)
                        if 'multi_txt_act' in element.get('class', []):
                            current_memory = memory_text
            
            # SIM
            sim_options = []
            current_sim = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            
            for element in memory_elements:
                elem_id = element.get('id', '')
                if 'three_' in elem_id:
                    sim_text = element.get_text().strip()
                    if sim_text:
                        sim_options.append(sim_text)
                        if 'multi_txt_act' in element.get('class', []):
                            current_sim = sim_text
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_elem = card.find('img', class_='card_photo_img')
            image_url = img_elem.get('src', '') if img_elem else ''
            image_alt = img_elem.get('alt', '') if img_elem else ''
            
            if image_url and not image_url.startswith('http'):
                image_url = 'https://edwardpnz.ru' + image_url
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
            link_elem = card.find('a', class_='card_btn')
            product_url = link_elem.get('href', '') if link_elem else ''
            if product_url and not product_url.startswith('http'):
                product_url = 'https://edwardpnz.ru' + product_url
            
            product_data = {
                'product_id': product_id,
                'model': model_name,
                'price': f"{numeric_price:,} —Ä—É–±.".replace(',', ' ') if numeric_price > 0 else '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                'numeric_price': numeric_price,
                'old_price': old_price,
                'current_color': current_color,
                'available_colors': colors,
                'current_memory': current_memory,
                'memory_options': memory_options,
                'current_sim': current_sim,
                'sim_options': sim_options,
                'image_url': image_url,
                'image_alt': image_alt,
                'product_url': product_url,
                'colors_count': len(colors),
                'memory_count': len(memory_options)
            }
            
            print(f"‚úÖ –¢–æ–≤–∞—Ä {product_id}: {model_name} - {numeric_price} —Ä—É–±.")
            return product_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            return None

class iPhoneDatabase:
    def __init__(self, db_name='iphones_catalog.db'):
        self.db_name = db_name
        self._create_tables()
    
    def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS iphones_catalog (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                product_id TEXT UNIQUE,
                model TEXT NOT NULL,
                price INTEGER DEFAULT 0,
                currency TEXT DEFAULT 'RUB',
                old_price TEXT,
                current_color TEXT,
                current_memory TEXT,
                current_sim TEXT,
                image_url TEXT,
                product_url TEXT,
                parsed_at DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS iphone_catalog_colors (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                product_id TEXT,
                color_name TEXT,
                FOREIGN KEY (product_id) REFERENCES iphones_catalog (product_id)
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS iphone_catalog_memory (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                product_id TEXT,
                memory_size TEXT,
                FOREIGN KEY (product_id) REFERENCES iphones_catalog (product_id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def save_catalog(self, catalog_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not catalog_data.get('success', False):
            return False
            
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        saved_count = 0
        try:
            for product in catalog_data.get('products', []):
                cursor.execute('''
                    INSERT OR REPLACE INTO iphones_catalog 
                    (product_id, model, price, currency, old_price, current_color, 
                     current_memory, current_sim, image_url, product_url, parsed_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    product.get('product_id'),
                    product.get('model'),
                    product.get('numeric_price'),
                    'RUB',
                    product.get('old_price'),
                    product.get('current_color'),
                    product.get('current_memory'),
                    product.get('current_sim'),
                    product.get('image_url'),
                    product.get('product_url'),
                    catalog_data.get('parsed_at')
                ))
                
                product_id = product.get('product_id')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç–∞
                cursor.execute('DELETE FROM iphone_catalog_colors WHERE product_id = ?', (product_id,))
                for color in product.get('available_colors', []):
                    cursor.execute('INSERT INTO iphone_catalog_colors (product_id, color_name) VALUES (?, ?)', (product_id, color))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–º—è—Ç—å
                cursor.execute('DELETE FROM iphone_catalog_memory WHERE product_id = ?', (product_id,))
                for memory in product.get('memory_options', []):
                    cursor.execute('INSERT INTO iphone_catalog_memory (product_id, memory_size) VALUES (?, ?)', (product_id, memory))
                
                saved_count += 1
            
            conn.commit()
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {saved_count}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            return False
        finally:
            conn.close()

def main_catalog():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    parser = IPhoneCatalogParser()
    db = iPhoneDatabase()
    
    # –ß–∏—Ç–∞–µ–º HTML –∏–∑ —Ñ–∞–π–ª–∞
    try:
        with open('site-html.txt', 'r', encoding='utf-8') as f:
            catalog_html = f.read()
        print(f"üìÅ HTML –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞, —Ä–∞–∑–º–µ—Ä: {len(catalog_html)} —Å–∏–º–≤–æ–ª–æ–≤")
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª site-html.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print("=== –ü–ê–†–°–ò–ù–ì –ö–ê–¢–ê–õ–û–ì–ê IPHONE ===")
    
    result = parser.parse_catalog_html(catalog_html)
    
    if result.get('success'):
        print(f"\n‚úÖ –£–°–ü–ï–®–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê –ö–ê–¢–ê–õ–û–ì–ê:")
        print(f"üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {result['total_products']}")
        
        # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        for i, product in enumerate(result['products'][:5]):
            print(f"\n--- –¢–æ–≤–∞—Ä {i+1} ---")
            print(f"üì± –ú–æ–¥–µ–ª—å: {product['model']}")
            print(f"üí∞ –¶–µ–Ω–∞: {product['price']}")
            print(f"üé® –¶–≤–µ—Ç: {product['current_color']}")
            print(f"üíæ –ü–∞–º—è—Ç—å: {product['current_memory']}")
            print(f"üÜî ID: {product['product_id']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        if db.save_catalog(result):
            print(f"\nüíæ –í–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ –±–∞–∑—É")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞")

def main_single():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è)"""
    from main import IPhoneParser, iPhoneDatabase
    
    parser = IPhoneParser()
    db = iPhoneDatabase('iphones_single.db')
    
    iphone_17_html = """[–≤–∞—à HTML –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞]"""
    
    print("=== –ü–ê–†–°–ò–ù–ì –û–î–ù–û–ì–û –¢–û–í–ê–†–ê ===")
    result = parser.parse_iphone_html(iphone_17_html)
    
    if result.get('success'):
        print("\n‚úÖ –£–°–ü–ï–®–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ (–æ–¥–∏–Ω —Ç–æ–≤–∞—Ä):")
        print(f"üì± –ú–æ–¥–µ–ª—å: {result['model']}")
        print(f"üí∞ –¶–µ–Ω–∞: {result['price']}")
        
        if db.save_iphone(result):
            print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞
    main_catalog()
    
    print("\n" + "="*50)
    
    # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    # main_single()